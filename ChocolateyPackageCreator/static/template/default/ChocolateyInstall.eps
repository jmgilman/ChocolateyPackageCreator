$packageName = '<%= $packageName %>'
$filePath = '<%= $filePath %>'
$filePath64 = '<%= $filePath64 %>'
$fileType = '<%= $fileType %>'
$flags = '<%= $flags %>'
$exitCodes = @(<%= $exitCodes -Join ', ' %>)

<% if ($arguments.Count -eq 0) { -%>
$arguments = @{}
<%} else { -%>
$arguments = @{
<%= ($arguments.GetEnumerator() | ForEach-Object { '    ' + $_.Name + ' = "' + $_.Value + '"' }) -Join "`n" %>
}
<% } -%>

$params = Get-PackageParameters

# Build arguments
if (($params.Count -gt 0) -and ($arguments.Count -eq 0)) {
    Write-Warning 'Parameters were given but this package does not take any parameters'
} elseif (($params.Count -gt 0) -and ($arguments.Count -gt 0)) {
    foreach($param in $params.GetEnumerator()) {
        if (!($param.Name -in $arguments.Keys)) {
            Write-Warning ('This package does not have a {0} parameter' -f $param.Name)
            continue
        }

        $arguments[$param.Name] = $param.Value
    }
}

# Build argument string
$silentArgs = $flags
foreach($argument in $arguments.GetEnumerator()) {
    if ($argument.Value) {
        if ($fileType -eq 'exe') {
            $argString = ' /{0}="{1}"' -f $argument.Name, $argument.Value
        } else {
            $argString = ' {0}="{1}"' -f $argument.Name, $argument.Value
        }
        $silentArgs += $argString
    }
}

$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
$packageDir = Split-Path -Parent $scriptDir

$fileLocation = Join-Path $packageDir $filePath
$fileLocation = (Get-Item $fileLocation).FullName # Resolve relative paths

if ($filePath64) {
    $fileLocation64 = Join-Path $packageDir $filePath64
    $fileLocation64 = (Get-Item $fileLocation64).FullName
}

if ($filePath64) {
    Install-ChocolateyInstallPackage `
        -PackageName $packageName `
        -FileType $fileType `
        -File $fileLocation `
        -File64 $fileLocation64 `
        -SilentArgs $silentArgs.Trim() `
        -ValidExitCodes $exitCodes
} else {
    Install-ChocolateyInstallPackage `
        -PackageName $packageName `
        -FileType $fileType `
        -File $fileLocation `
        -SilentArgs $silentArgs.Trim() `
        -ValidExitCodes $exitCodes
}
